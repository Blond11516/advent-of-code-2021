# Day 16

## Description

https://adventofcode.com/2021/day/16

## Input

<!-- livebook:{"livebook_object":"cell_input","name":"input","type":"textarea","valuen"} -->

get the raw input here

```elixir
input = IO.getn("input", 999_999_999_999_999_999_999_999_999)
```

parse the input here

```elixir
input = String.trim(input)

input_length = String.length(input)
transmission_length = input_length * 4

transmission = <<String.to_integer(input, 16)::size(transmission_length)>>
```

## Part 1

```elixir
defmodule Day16.Part1 do
  def parse_transmission(transmission), do: parse_packet(transmission, 0)

  defp parse_packet(<<version::3, <<4::3>>, rest::bits>>, sum) do
    {_value, rest} = parse_literal(rest, <<>>, 1)
    parse_packet(rest, sum + version)
  end

  defp parse_packet(
         <<version::3, <<_type::3>>, <<0::1>>, <<_subpacket_length::15>>, rest::bits>>,
         sum
       ) do
    parse_packet(rest, sum + version)
  end

  defp parse_packet(<<version::3, <<_::3>>, <<1::1>>, <<_subpacket_count::11>>, rest::bits>>, sum) do
    parse_packet(rest, sum + version)
  end

  defp parse_packet(_, sum), do: sum

  defp parse_literal(<<1::1, part::bits-size(4), rest::bits>>, acc, group_count) do
    acc = <<acc::bits, part::bits>>
    parse_literal(rest, acc, group_count + 1)
  end

  defp parse_literal(transmission, acc, group_count) do
    <<0::1, part::bits-size(4), rest::bits>> = transmission
    value_size = group_count * 4
    <<value::size(value_size)>> = <<acc::bits, part::bits>>
    {value, rest}
  end
end

Day16.Part1.parse_transmission(transmission)
```

## Part 2

```elixir
defmodule Day16.Part2 do
  def parse_transmission(transmission) do
    {value, _} = parse_packet(transmission)
    value
  end

  defp parse_packet(<<_::3, <<4::3>>, rest::bits>>) do
    parse_literal(rest, <<>>, 1)
  end

  defp parse_packet(<<_::3, <<type::3>>, <<0::1>>, <<subpacket_length::15>>, rest::bits>>) do
    parse_operator(rest, type, subpacket_length: subpacket_length)
  end

  defp parse_packet(<<_::3, <<type::3>>, <<1::1>>, <<subpacket_count::11>>, rest::bits>>) do
    parse_operator(rest, type, subpacket_count: subpacket_count)
  end

  defp parse_literal(<<1::1, part::bits-size(4), rest::bits>>, acc, group_count) do
    acc = <<acc::bits, part::bits>>
    parse_literal(rest, acc, group_count + 1)
  end

  defp parse_literal(transmission, acc, group_count) do
    <<0::1, part::bits-size(4), rest::bits>> = transmission
    value_size = group_count * 4
    <<value::size(value_size)>> = <<acc::bits, part::bits>>
    {value, rest}
  end

  defp parse_operator(transmission, 0, options),
    do: parse_subpackets(transmission, &Enum.sum/1, options)

  defp parse_operator(transmission, 1, options),
    do: parse_subpackets(transmission, &Enum.product/1, options)

  defp parse_operator(transmission, 2, options),
    do: parse_subpackets(transmission, &Enum.min/1, options)

  defp parse_operator(transmission, 3, options),
    do: parse_subpackets(transmission, &Enum.max/1, options)

  defp parse_operator(transmission, 5, options),
    do: parse_subpackets(transmission, &greater_than_operation/1, options)

  defp parse_operator(transmission, 6, options),
    do: parse_subpackets(transmission, &lesser_than_operation/1, options)

  defp parse_operator(transmission, 7, options),
    do: parse_subpackets(transmission, &equal_operation/1, options)

  defp parse_subpackets(transmission, operation, subpacket_length: subpacket_length) do
    <<subpackets::bits-size(subpacket_length), rest::bits>> = transmission

    value =
      Stream.repeatedly(fn -> nil end)
      |> Enum.reduce_while({subpackets, []}, fn _, {subpackets, values} ->
        {value, rest} = parse_packet(subpackets)
        values = [value | values]

        cont_or_halt =
          if rest == <<>> do
            :halt
          else
            :cont
          end

        {cont_or_halt, {rest, values}}
      end)
      |> then(&elem(&1, 1))
      |> Enum.reverse()
      |> operation.()

    {value, rest}
  end

  defp parse_subpackets(transmission, operation, subpacket_count: subpacket_count) do
    {rest, values} =
      1..subpacket_count
      |> Enum.reduce({transmission, []}, fn _, {subpackets, values} ->
        {value, rest} = parse_packet(subpackets)
        {rest, [value | values]}
      end)

    value =
      values
      |> Enum.reverse()
      |> operation.()

    {value, rest}
  end

  defp greater_than_operation([first, second]) when first > second, do: 1
  defp greater_than_operation(_), do: 0

  defp lesser_than_operation([first, second]) when first < second, do: 1
  defp lesser_than_operation(_), do: 0

  defp equal_operation([first, second]) when first == second, do: 1
  defp equal_operation(_), do: 0
end

Day16.Part2.parse_transmission(transmission)
```
